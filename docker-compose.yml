version: '3.8'

services:
  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: bitnami/zookeeper:3.8.3-debian-11-r21
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka-net
    restart: on-failure
  kafka:
    container_name: kafka
    hostname: kafka
    image: bitnami/kafka:3.4.0-debian-11-r21
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_BROKER_ID=0
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=1
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_CFG_MIN_INSYNC_REPLICAS=1
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      zookeeper:
        condition: service_started
    networks:
      - kafka-net
    restart: on-failure
  kafka-rest:
    container_name: kafka-rest
    hostname: kafka-rest
    image: confluentinc/cp-kafka-rest
    depends_on:
      - kafka
    ports:
      - "8082:8082"
    environment:
      - KAFKA_REST_HOST_NAME=kafka-rest
      - KAFKA_REST_BOOTSTRAP_SERVERS=kafka:9092
    networks:
      - kafka-net 
    restart: on-failure
  jupyter:
    container_name: kafka-jupyter
    hostname: kafka-jupyter
    image: jupyter:latest
    depends_on:
      - kafka
    volumes:
      - ./myjupyter:/notebook
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    networks:
      - kafka-net
    restart: on-failure
  backend:
    build: ./kafka_react_app/backend
    container_name: kafka-backend
    hostname: kafka-backend
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - KAFKA_BROKERS=kafka:9092
      - PG_HOST=kafka-postgres
      - PG_PORT=5432
      - PG_DATABASE=postgres
      - PG_USER=user
      - PG_PASSWORD=root
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/api/messages"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_started
    networks:
      - kafka-net
    restart: on-failure
  frontend:
    build: ./kafka_react_app/frontend
    container_name: kafka-frontend
    hostname: kafka-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - WDS_SOCKET_PORT=0
    volumes:
      - ./kafka_react_app/frontend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    depends_on:
      - backend
    networks:
      - kafka-net
    restart: on-failure

  postgres:
    image: postgres:15
    container_name: kafka-postgres
    hostname: kafka-postgres
    ports:
      - "10000:5432"
    environment:
      - POSTGRES_PASSWORD=root
      - POSTGRES_USER=user
      - POSTGRES_DB=postgres
    volumes:
      - ./kafka_react_app/backend/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
      - ./kafka_react_app/backend/postgres_data:/var/lib/postgresql/data
    networks:
      - kafka-net
    restart: on-failure


networks:
  kafka-net:
    driver: bridge
