version: '3.8'

services:
  kafka:
    container_name: kafka
    hostname: kafka
    image: bitnami/kafka:4.0-debian-12
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller          # ✅ ДОБАВЛЕНО: роли брокера и контроллера
      - KAFKA_CFG_NODE_ID=1                                 # ✅ ДОБАВЛЕНО: уникальный ID узла
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093     # ✅ ДОБАВЛЕНО: кто участвует в выборах контроллера
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER      # ✅ ДОБАВЛЕНО: слушатель для контроллера
      - KAFKA_CFG_LISTENERS=INTERNAL://kafka:9092,CONTROLLER://kafka:9093 # ✅ ОБНОВЛЕНО: объявлены два слушателя
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092 # ✅ ОБНОВЛЕНО: только внутренний слушатель
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT # ✅ ДОБАВЛЕНО
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID=jhCzCarDSyqr9FkZhIbmYQ # ✅ ДОБАВЛЕНО: ID кластера (должен быть 32 символа) 
    restart: unless-stopped
    networks:
      - kafka-net

  kafka-rest:
    container_name: kafka-rest
    image: confluentinc/cp-kafka-rest:7.9.1
    depends_on:
      - kafka
    ports:
      - "8082:8082"
    environment:
      - KAFKA_REST_HOST_NAME=kafka-rest
      - KAFKA_REST_BOOTSTRAP_SERVERS=kafka:9092
    restart: unless-stopped
    networks:
      - kafka-net

  jupyter:
    build: 
      context: ./myjupyter
      dockerfile: Dockerfile
    depends_on:
      - kafka
    volumes:
      - ./myjupyter:/notebook
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    restart: unless-stopped
    networks:
      - kafka-net

  backend:
    build: ./kafka_react_app/backend
    container_name: backend
    ports:
      - "5000:3000"
    environment:
      - PORT=3000
      - KAFKA_BROKERS=kafka:9092
    restart: unless-stopped
    depends_on:
      - kafka
    networks:
      - kafka-net
    command: /bin/sh -c "sleep 10 && npm start"
  postgres:
    image: postgres:15
    container_name: air_analyzer-postgres
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=root
      - POSTGRES_DB=postgres
    ports:
      - 10001:5432
    volumes:  
      - ./postgres/db_queries:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - kafka-net
  frontend:
    build: ./kafka_react_app/frontend
    container_name: frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - WDS_SOCKET_PORT=0
    volumes:
      - ./kafka_react_app/frontend:/app
      - /app/node_modules
    restart: unless-stopped
    depends_on:
      - backend
    networks:
      - kafka-net
    
  ip_camera:
    build: ./ip_camera
    container_name: ip_camera
    ports:
      - "5001:5001"
    restart: unless-stopped
    depends_on:
      - kafka
    networks:
      - kafka-net
networks:
  kafka-net:
    driver: bridge

volumes:
  postgres_data:
